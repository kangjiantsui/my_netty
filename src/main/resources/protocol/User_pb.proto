syntax = "proto2";
package User_pb;
option java_package = "com.leocool.sgland.protocol";
option java_outer_classname = "UserMsg";

import "Data_pb.proto";

message FullUserInfo {
    optional int64 id = 1;
    optional string name = 2;
    optional int32 gold = 3;
    optional int32 grain = 4;
    optional int32 ingot = 5;
    optional int32 level = 6;
    optional int32 exp = 7;
    optional int32 trophy = 8;
    optional int32 vip = 9;
    optional int32 avatar = 10;
    optional string guide = 11;
    optional int64 shield = 12;
    optional int64 union_id = 13;
    optional string union_name = 14;
    optional int32 union_avatar = 15;
    optional string union_tag = 16;
    optional int32 union_title = 17;
    optional int64 last_login = 18;
    optional int32 vip_exp = 19;
    optional int32 def_troop = 20;
    optional int32 card_back = 21;
    optional int32 avatar_frame = 22;
    optional int64 reg_date = 23;
    optional int32 config = 24;
    optional int32 privilege = 25;
    optional string code = 26;
    optional int32 rid = 27;
    optional int32 guide1 = 28;
    optional int32 guide2 = 29;
    optional Data_pb.Crown crown = 30;
    optional int32 achievement = 31;
    optional int32 avatar_frame_count = 32;
    optional string extra = 33;
    optional int32 season_status = 34;
    optional int32 union_devote = 35;
    optional int64 guideEndDate = 36;
    optional int32 initial_character = 37;
    optional int32 binding_ingot = 38;
    optional int32 badge = 39;
    optional int64 leave_union_time = 40;
    optional int64 join_union_time = 41;
}

message SglUserMsg {
    optional UserRegReq user_reg_req = 300;
    optional UserInResp user_in_resp = 301;

}

message InitCardsResp {
    repeated Data_pb.Resource init_card = 1;
    optional int32 avatar = 2;
}

message Exp {
    optional int32 old_exp = 1;
    optional int32 get_exp = 2;
    optional int32 curr_exp = 3;
    optional int32 curr_level = 4;
}

message VisitReq {
    optional int64 visit = 1;
    optional int32 type = 2;
}

message CheckCheatReq {
    optional string md5 = 1;
    optional int32 type = 2;

}

message BanLoginResp {
    optional int64 end_time = 1;
    optional string desc = 2;
}

message UserBattle {
    optional int32 total_atk_win = 1;
    optional int32 total_atk_lose = 2;
    optional int32 total_def_win = 3;
    optional int32 total_def_lose = 4;
    optional int32 total_pvp_win = 5;
    optional int32 total_pvp_lose = 6;
    optional int32 period_atk_win = 7;
    optional int32 period_atk_lose = 8;
    optional int32 period_def_win = 9;
    optional int32 period_def_lose = 10;
    optional int32 daily_pvp_win = 11;
    optional int32 daily_pvp_lose = 12;
    optional int32 boss_score = 13;
    optional int32 daily_ladder_win = 14;
    optional int32 daily_ladder_lose = 15;
    optional int32 ladder_cont_win = 16;
    optional int32 ladder_cont_lose = 17;
    optional int32 daily_ladder_contWin = 18;
    optional int32 daily_ladder_ex_contWin = 19;
    optional int32 daily_ladder_ex_totalWin = 20;
    optional int32 daily_ladder_ex_contMaxWin = 21;
    optional int32 daily_masswar_win = 22;
}

message UserCollectGoldResp {
    optional int32 gold = 1;
    optional int32 credit = 2;
}

message UserCount {
    optional int32 buy_gold = 1;
    optional int32 buy_grain = 2;
    optional int32 buy_refresh = 3;
    optional int32 buy_chest1 = 4;
    optional int32 buy_chest2 = 5;
    optional int32 buy_chest3 = 6;
    optional int32 buy_chest4 = 7;
    optional int32 buy_hero_exp = 8;
    optional int32 buy_equip_exp = 9;
    optional int32 buy_horse_exp = 10;
    optional int32 buy_book_exp = 11;
    optional int32 buy_commander = 12;
    optional int32 buy_elite = 13;
    optional int32 buy_expedition = 14;
    optional int32 buy_rob_gold = 15;
    optional int32 edit_name = 16;
    optional int64 next_share = 17;
    optional int32 challenge_commander = 18;
    optional int32 challenge_elite = 19;
    optional int32 expedition = 20;
    optional int32 rob_gold = 21;
    optional int64 next_chat = 22;
    optional int32 send_mail = 23;
    optional int64 month_card = 24;
    optional int32 collect_gold = 25;
    optional int32 charge = 26;
    optional int64 next_spawn = 27;
    optional int64 next_sos = 28;
    optional int32 donate = 29;
    optional int32 buy_remedy = 30;
    optional int32 buy_stone = 31;
    optional int32 buy_rob_exp = 32;
    optional int32 rob_exp = 33;
    optional int32 trophy = 34;
    optional int32 daily_charge = 35;
    optional int32 win_rob_gold = 36;
    optional int32 worship = 37;
    optional int32 buy_refresh_pvp = 38;
    optional int32 buy_refresh_union = 39;
    optional int32 atk_boss = 40;
    optional int32 buy_atk_boss = 41;
    optional int32 re_check = 42;
    optional int64 month_card_ex = 43;
    optional int64 next_find = 44;
    optional int32 buy_refresh_find = 45;
    optional int32 grace = 46;
    optional int32 atk_uboss = 47;
    optional int32 welfare = 48;
    optional int32 buy_refresh_ladder = 49;
    optional int32 atk_player = 50;
    optional int32 invite_charge = 51;
    optional int32 invite_count = 52;
    optional int32 reset_ladder = 53;
    optional int32 consume = 54;
    optional int32 month_card_month = 55;
    optional int32 month_card_ex_month = 56;
    optional int32 share_reward = 57;
    optional int32 buy_vip_gift = 58;
    optional int64 limit_gift_start_time = 59;
    optional string charge_ex = 60;
    optional bool buy_ladder_ex_ticket = 61;
    optional int32 month_card_count = 62;
    optional int32 month_card_ex_count = 63;
    optional int64 month_card_diamond = 64;
    optional int32 month_card_diamond_month = 65;
    optional string help_click = 66;
    optional int32 daily_sonsume = 67;
    optional int32 month_card_claim_count = 68;
    optional int32 month_card_ex_claim_count = 69;
    optional int32 month_card_diamond_claim_count = 70;
}

message UserInResp {
    optional FullUserInfo user_info = 1;
    optional Data_pb.PlayerCard card = 2;
    optional Data_pb.AttachData attach = 3;
    optional Data_pb.PlayerCity city = 4;
    optional Data_pb.PlayerWorld world = 5;
    optional UserBattle user_battle = 6;
    optional UserLottery user_lottery = 7;
    optional UserCount user_count = 8;
    optional string announcement = 9;
    optional int64 time_offset = 10;
    optional int64 time_of_ann = 11;
    optional bool is_in_battle = 12 [default = false];
    optional Data_pb.UnionMini union = 13;
    optional int64 open_time = 14;
    repeated int64 ban_chat = 15;
    optional bool can_bind = 16;
    optional int32 function_switch = 17;
    optional bool is_in_match = 18 [default = false];
    repeated Data_pb.PaymentActivity payment_activity = 19;
    repeated Data_pb.Activity activity = 20;
    repeated Data_pb.PaymentActivity time_limit_card = 21;
    repeated Data_pb.XlsActivity xls_activity = 22;
    optional Data_pb.LockCard lock_card = 23;
    optional Data_pb.ActivityManage activity_manage = 24;
}

message UserLoginReq {
    optional int64 user_id = 1;
    optional string version = 2;
    optional string cid = 3;
    optional string device_info = 4;
    optional string binary_version = 5;
    optional string sign_data = 6;
    optional string uid = 7;
    optional string social_id = 8;
}

message UserLottery {
    repeated int64 next_free = 1;
    optional int32 next_quality = 2;
    repeated int32 count = 3;
    optional int32 nchest = 4;
    optional int32 nchest_ex = 5;
    optional int32 point = 6;
}

message UserNotifyEvent {
    optional string code = 1;
    optional int32 type = 2;
    optional int32 param = 3;
    optional Data_pb.AccountInfo info = 4;
    optional bool renotfiy = 5;
}

message UserOpenChestReq {
    optional int32 id = 1;
    optional int32 num = 2;
}

message UserRegReq {
    optional string channel = 1;
    optional int32 rid = 2;
    optional string uid = 3;
    optional string version = 4;
    optional string cid = 5;
    optional string device_info = 6;
    optional string binary_version = 7;
    optional string idfa = 8;
    optional string appid = 9;
    optional string sign_data = 10;
    optional string social_id = 11;
}

message UserSetSkinReq {
    optional int32 info_id = 1;
    optional int32 skin_id = 2;
}

message UserSpawnGoldResp {
    optional int32 gold = 1;
    optional int64 next_spawn = 2;
}

message UserUnlockCharacterReq {
    optional int32 char_id = 1;
    optional bool use_ingot = 2;
}

message UserVisitExResp {
    optional Data_pb.UserInfo user_info = 1;
    optional int32 pre_rank = 2;
    optional int32 best_rank = 3;
    optional int32 legend_trophy = 4;
    optional int32 pre_legend_rank = 5;
    optional int32 best_legend_rank = 6;
}

message UserVisitResp {
    optional Data_pb.UserInfo user_info = 1;
    repeated Data_pb.Resource troop = 2;
    optional int32 power = 3;
}

message UserCardEvolutionReq {
    optional int64 card_id = 1;
    optional int32 star = 2;
    optional Data_pb.Resource card_essence = 3;
}

message UserClimedOpenServerReq {
    optional int32 info_id = 1;
}

message UserClimedOpenServerResp {
    repeated Data_pb.Resource resource = 1;
    optional bool is_success = 2;
}

message UseExperienceCardReq {
    optional int32 info_id = 1;
    optional int32 num = 2;
}

message UserWorshipReq {
    optional string code = 1;
    optional bool is_free = 2;
}

message PlayerSendGiftReq {
    optional int64 info_id = 1;
    optional int64 target_id = 2;
    optional int32 num = 3;
}

message UserOpenBoxReq {
    optional int32 info_id = 1;
    optional int32 num = 2;
}
message UserOpenBoxHalloweenResp {
    optional int32 info_id = 1;
    optional int32 num = 2;
    optional int32 use_box_id = 3;
}
message UserChangeResource {
    optional int32 param = 1;
    optional string resource_type = 2;
    optional Data_pb.Resource resource = 3;
    optional int32 end = 4;
    optional FullUserInfo user_info = 5;
    optional Data_pb.PlayerCard card = 6;
    optional Data_pb.AttachData attach = 7;
}
